
import random

class Die:
    def __init__(self, sides = 2, value = 0):  
    #the number of sides of the dice is initiated and the value will be returned as any integer b/n 1 and the number of sides.
 
    if sides < 2:                                      
            raise ValueError('Side must be greater than 1')
        if not isinstance(value, int):
            raise ValueError('Must be whole number')
        self.value = random.randint(1, sides)

# lets extend the class Die with a class that takes fixed 6 sides

class D6(Die):
    def __init__(self, value= 0):
        super(D6, self).__init__(sides=6, value=value)

    def __int__(self):
        return self.value

    def __eq__(self, other):
        return int(self) == other
        
    def __ne__(self, other):
        return int(self) != other
    
    def __ge__(self, other):
        return int(self) >= other
    
    def __gt__(self, other):
        return int(self) > other
    
    def __lt__(self, other):
        return int(self) < other
    
    def __le__(self, other):
        return int(self) <= other
    
    def __add__(self, other):
        return int(self) + other
    
    def __radd__(self, other):
        return int(self) + other
    
    def __repr__(self):
        return str(self.value)

class Hand(list):

def __init__(self, size=0, die_class=None):
        super().__init__()
        if not die_class:
            raise ValueError('die_class is not Valid')
        for x in range(0, size):
            self.append(die_class())
            self.sort()

class YatzyHand(Hand):

def __init__(self):
        super(YatzyHand, self).__init__(size=6, die_class= D6)

    def sum_values(self):
        num = 0
        for die in self:
            num += die
        return num
        
        
    
d = D6()
Ben = YatzyHand()
Efi = YatzyHand()
print(Ben)
print("Ben", Ben.sum_values())
print(Efi)
print('Efi', Efi.sum_values())
        
